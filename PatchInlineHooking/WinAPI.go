// Code generated by 'go generate'; DO NOT EDIT.

package PatchInlineHooking

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modKernel32 = windows.NewLazySystemDLL("Kernel32.dll")
	modUser32   = windows.NewLazySystemDLL("User32.dll")

	procGetCurrentProcess  = modKernel32.NewProc("GetCurrentProcess")
	procReadProcessMemory  = modKernel32.NewProc("ReadProcessMemory")
	procWriteProcessMemory = modKernel32.NewProc("WriteProcessMemory")
	procMessageBoxA        = modUser32.NewProc("MessageBoxA")
)

func GetCurrentProcess() (pro uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procGetCurrentProcess.Addr(), 0, 0, 0, 0)
	pro = uintptr(r0)
	if pro == 0 {
		err = errnoErr(e1)
	}
	return
}

func ReadProcessMemory(p1 uintptr, p2 uintptr, p3 uintptr, p4 uintptr, p5 uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procReadProcessMemory.Addr(), 5, uintptr(p1), uintptr(p2), uintptr(p3), uintptr(p4), uintptr(p5), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WriteProcessMemory(p1 uintptr, p2 uintptr, p3 uintptr, p4 uintptr, p5 uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procWriteProcessMemory.Addr(), 5, uintptr(p1), uintptr(p2), uintptr(p3), uintptr(p4), uintptr(p5), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func MessageBoxA(p1 uintptr, p2 uintptr, p3 uintptr, p4 uintptr) (p5 uintptr, err error) {
	r0, _, e1 := syscall.Syscall6(procMessageBoxA.Addr(), 4, uintptr(p1), uintptr(p2), uintptr(p3), uintptr(p4), 0, 0)
	p5 = uintptr(r0)
	if p5 == 0 {
		err = errnoErr(e1)
	}
	return
}
